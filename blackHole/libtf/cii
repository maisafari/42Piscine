BZERO(3)                   Linux Programmer's Manual                  BZERO(3)

NNAAMMEE
       bzero, explicit_bzero - zero a byte string

SSYYNNOOPPSSIISS
       ##iinncclluuddee <<ssttrriinnggss..hh>>

       vvooiidd bbzzeerroo((vvooiidd **_s,, ssiizzee__tt _n));;

       ##iinncclluuddee <<ssttrriinngg..hh>>

       vvooiidd eexxpplliicciitt__bbzzeerroo((vvooiidd **_s,, ssiizzee__tt _n));;

DDEESSCCRRIIPPTTIIOONN
       The  bbzzeerroo()  function  erases  the  data  in the _n bytes of the memory
       starting at the location pointed to by _s, by writing zeros (bytes  con‐
       taining '\0') to that area.

       The  eexxpplliicciitt__bbzzeerroo()  function  performs the same task as bbzzeerroo().  It
       differs from bbzzeerroo() in that it guarantees that compiler  optimizations
       will  not  remove  the erase operation if the compiler deduces that the
       operation is "unnecessary".

RREETTUURRNN VVAALLUUEE
       None.

VVEERRSSIIOONNSS
       eexxpplliicciitt__bbzzeerroo() first appeared in glibc 2.25.

AATTTTRRIIBBUUTTEESS
       For an  explanation  of  the  terms  used  in  this  section,  see  aatt‐‐
       ttrriibbuutteess(7).

       ┌─────────────────┬───────────────┬─────────┐
       │IInntteerrffaaccee        │ AAttttrriibbuuttee     │ VVaalluuee   │
       ├─────────────────┼───────────────┼─────────┤
       │bbzzeerroo(),         │ Thread safety │ MT-Safe │
       │eexxpplliicciitt__bbzzeerroo() │               │         │
       └─────────────────┴───────────────┴─────────┘
CCOONNFFOORRMMIINNGG TTOO
       The  bbzzeerroo() function is deprecated (marked as LEGACY in POSIX.1-2001);
       use mmeemmsseett(3) in new programs.  POSIX.1-2008 removes the  specification
       of bbzzeerroo().  The bbzzeerroo() function first appeared in 4.3BSD.

       The  eexxpplliicciitt__bbzzeerroo()  function is a nonstandard extension that is also
       present on some of the BSDs.  Some other implementations have a similar
       function, such as mmeemmsseett__eexxpplliicciitt() or mmeemmsseett__ss().

NNOOTTEESS
       The  eexxpplliicciitt__bbzzeerroo()  function  addresses a problem that security-con‐
       scious applications may run into when using bbzzeerroo():  if  the  compiler
       can deduce that the location to zeroed will never again be touched by a
       _c_o_r_r_e_c_t program, then it may remove the bbzzeerroo() call altogether.   This
       is  a  problem if the intent of the bbzzeerroo() call was to erase sensitive
       data (e.g., passwords) to prevent the possibility  that  the  data  was
       leaked   by   an  incorrect  or  compromised  program.   Calls  to  eexx‐‐
       pplliicciitt__bbzzeerroo() are never optimized away by the compiler.

       The eexxpplliicciitt__bbzzeerroo() function does not solve  all  problems  associated
       with erasing sensitive data:

       1. The eexxpplliicciitt__bbzzeerroo() function does _n_o_t guarantee that sensitive data
          is completely erased from memory.  (The same is  true  of  bbzzeerroo().)
          For example, there may be copies of the sensitive data in a register
          and in "scratch" stack areas.  The eexxpplliicciitt__bbzzeerroo() function is  not
          aware of these copies, and can't erase them.

       2. In  some  circumstances, eexxpplliicciitt__bbzzeerroo() can _d_e_c_r_e_a_s_e security.  If
          the compiler determined that the variable containing  the  sensitive
          data  could  be  optimized to be stored in a register (because it is
          small enough to fit in a register, and no operation other  than  the
          eexxpplliicciitt__bbzzeerroo()  call  would  need to take the address of the vari‐
          able), then the eexxpplliicciitt__bbzzeerroo() call will  force  the  data  to  be
          copied  from  the register to a location in RAM that is then immedi‐
          ately erased (while the copy in the  register  remains  unaffected).
          The problem here is that data in RAM is more likely to be exposed by
          a bug than data in a register, and thus  the  eexxpplliicciitt__bbzzeerroo()  call
          creates a brief time window where the sensitive data is more vulner‐
          able than it would otherwise have been if no attempt had  been  made
          to erase the data.

       Note  that declaring the sensitive variable with the vvoollaattiillee qualifier
       does _n_o_t eliminate the above  problems.   Indeed,  it  will  make  them
       worse, since, for example, it may force a variable that would otherwise
       have been optimized into a register to instead be maintained  in  (more
       vulnerable) RAM for its entire lifetime.

       Notwithstanding the above details, for security-conscious applications,
       using eexxpplliicciitt__bbzzeerroo() is generally preferable to not  using  it.   The
       developers  of  eexxpplliicciitt__bbzzeerroo()  anticipate that future compilers will
       recognize calls to eexxpplliicciitt__bbzzeerroo() and take steps to ensure  that  all
       copies  of the sensitive data are erased, including copies in registers
       or in "scratch" stack areas.

SSEEEE AALLSSOO
       bbssttrriinngg(3), mmeemmsseett(3), sswwaabb(3)

CCOOLLOOPPHHOONN
       This page is part of release 5.05 of the Linux  _m_a_n_-_p_a_g_e_s  project.   A
       description  of  the project, information about reporting bugs, and the
       latest    version    of    this    page,    can     be     found     at
       https://www.kernel.org/doc/man-pages/.

Linux                             2019-03-06                          BZERO(3)
